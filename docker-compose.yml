services:
  # Servicio de base de datos PostgreSQL
  db:
    image: postgres:15
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./Zipa_DBInventario/init.sql:/docker-entrypoint-initdb.d/init.sql
      - db_data:/var/lib/postgresql/data
    networks:
      - backend

  # Servicio del backend NestJS para inventario
  inventory-api:
    build: ./Zipa_Inventory
    container_name: inventory_api
    restart: always
    command: npm run start:dev
    ports:
      - "3000:3000"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
    depends_on:
      - db
    networks:
      - backend

  # Servicio de MongoDB para tipos de servicios clínicos
  mongo:
    image: mongo:7
    container_name: mongo_services
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: ecommerce_services
    volumes:
      - mongo_data:/data/db
      - ./Zipa_DBServicio:/docker-entrypoint-initdb.d  # Inicializa los servicios clínicos
    networks:
      - backend

  # Servicio del backend NestJS para servicios clínicos
  servicios-api:
    build: ./Zipa_servicio
    container_name: servicios_api
    restart: always
    ports:
      - "3001:3000"  # Puerto distinto para no chocar con inventory-api
    environment:
      MONGO_URI: mongodb://mongo:27017/ecommerce_services
    depends_on:
      - mongo
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  db_data:
  mongo_data:
